services:
  postgresql:
    image: postgres:16-alpine
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: mini_ecommerce
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=pass
    ports:
      - "5672:5672" # AMQP traffic
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  auth:
    build:
      context: ../../auth
      target: prod # Use the prod stage
    container_name: auth
    ports:
      - "3001:3001"
    environment:
      - SERVICE=auth
    env_file:
      - ../../auth/.env
    depends_on:
      postgresql:
        condition: service_healthy

  products:
    build:
      context: ../../products
      target: prod # Use the prod stage
    container_name: products
    ports:
      - "3002:3002"
    environment:
      - SERVICE=products
    env_file:
      - ../../products/.env
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  orders:
    build:
      context: ../../orders
      target: prod # Use the prod stage
    container_name: orders
    ports:
      - "3003:3003"
    environment:
      - SERVICE=orders
    env_file:
      - ../../orders/.env
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgresql_data:
  rabbitmq_data:
